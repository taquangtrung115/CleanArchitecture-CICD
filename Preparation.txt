REF: 
	*GOOD* https://learn.microsoft.com/en-us/aspnet/core/fundamentals/best-practices?view=aspnetcore-7.0
		
=> Host: Win-2019: 2gb - 500
	=> Administrator
	=> IIS: https://quantrimang.com/cong-nghe/su-dung-iis-tren-windows-server-2019-180357
	=> SQL: 1433: https://thietkewebdep24h.com/xem-tin/1255/huong-dan-mo-port-1433-cho-ms-sql-server.htm
	=> Java: 17 => SET JAVA_HOME
		+ https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html
		+ https://shareprogramming.net/cach-dat-bien-moi-truong-java_home-trong-windows-10/
	=> Jenkin:
		+ https://www.jenkins.io/doc/book/installing/windows/
	=> ngRok: https://ngrok.com/download
	=> GIT SCM
		+ https://git-scm.com/downloads
	=> .NET SDK:
		+ https://dotnet.microsoft.com/en-us/download
	=> Hosting Bundle
		+ https://learn.microsoft.com/vi-vn/aspnet/core/host-and-deploy/iis/hosting-bundle?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-2.1
		
	=> SonerQueue => Quản lý chất lượng code:
		+ https://www.sonarsource.com/products/sonarqube/downloads/
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
https://github.com/taquangtrung115/DemoCICD.git

========================================== Jenkins Pipline =====================================================================
pipeline {
    agent any
    environment {
        GIT_BRANCH = 'PROD'
        GitToken = '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'
        GitUrl = "https://taquangtrung115:${env.GitToken}@github.com/taquangtrung115/DemoCICD.git"
        ENV = 'Production'
        BUILD_CONFIG = 'Release'
        DOTNET_VERSION = 'net7.0'
        SLN = '.\\src\\DemoCICD.API\\DemoCICD.API.csproj'
        WEB_SITE = 'be.prod.com'
        APP_POOL = 'be.prod.com'
        PUBLISH_PATH = '.\\src\\DemoCICD.API\\bin\\%BUILD_CONFIG%\\%DOTNET_VERSION%\\publish'
        WWW_ROOT = 'G:\\WWW\\DemoCICD\\BE\\PROD'
        BACKUP = 'G:\\WWW\\DemoCICD\\BE\\PROD_BACKUP\\PROD_%date:~4,2%%date:~7,2%_0%time:~1,1%%time:~3,2%%time:~6,2%'
        
        SlnUnitTest = '.\\DemoCICD.sln'
        TrxFilePath = '.\\test\\DemoCICD.Architecture.Tests\\TestResults'
        TestResultFileName = 'UnitTestResult.trx'
        MainDirectory = 'G:\\WWW\\DemoCICD\\TestResults_PROD\\'
    }
    stages {
        stage('Backup') {
            steps {
                bat "xcopy ${env.WWW_ROOT} ${env.BACKUP} /e /y /i /r"
            }
        }
        stage('Git checkout') {
            steps {
                git branch: "${env.GIT_BRANCH}", url: "${env.GitUrl}"
            }
        }
        stage('Restore Nuget Package') {
            steps {
                bat "dotnet restore ${env.SLN}"
            }
        }
        stage('Clean') {
            steps {
                bat "dotnet clean ${env.SLN}"
            }
        }
        stage('Build') {
            steps {
                bat "dotnet build ${env.SLN} --configuration ${env.BUILD_CONFIG}"
            }
        }
        stage('Unit Test') {
            steps {
                bat "dotnet test ${env.SlnUnitTest} -l:trx;LogFileName=${env.TestResultFileName}"
                bat "if not exist ${env.MainDirectory} mkdir ${env.MainDirectory}"
                bat "copy ${env.TrxFilePath}\\${env.TestResultFileName} ${env.MainDirectory}"
            }
        }
        stage('Publish') {
            steps {
                bat "dotnet publish ${env.SLN} /p:Configuration=${env.BUILD_CONFIG} /p:EnvironmentName=${env.ENV}"
            }
        }
        stage('Stop IIS Server') {
            steps {
                bat "%windir%\\system32\\inetsrv\\appcmd stop sites ${env.WEB_SITE}"
                bat "%windir%\\system32\\inetsrv\\appcmd stop apppool /apppool.name:${env.APP_POOL}"
                bat "echo waiting until service stopped"
                bat "ping gooogle.com /n 5"
            }
        }
        stage('Copy to hosted website folder') {
            steps {
                bat "xcopy ${env.PUBLISH_PATH} ${env.WWW_ROOT} /e /y /i /r"
                
            }
        }
        stage('Start IIS Server') {
            steps {
                bat "%windir%\\system32\\inetsrv\\appcmd start apppool /apppool.name:${env.APP_POOL}"
                bat "%windir%\\system32\\inetsrv\\appcmd start sites ${env.WEB_SITE}"
            }
        }
    }
}
=====================================================================================================================



GIT:
	PROD
	STAG
	DEV => Feature
	
C: WWW\{Domain}\BE
	-- DEV
	-- STAG
	-- PROD
	
+ Install IIS: 
	- sieupham301.dev.com
	- sieupham301.stag.com
	- sieupham301.prod.com
+ => Add host for windows: 'C:\Windows\System32\drivers\etc\hosts'
		- 127.0.0.1 sieupham301.dev.com
		- 127.0.0.1 sieupham301.stag.com
		- 127.0.0.1 sieupham301.prod.com
		=> Nếu muốn dùng IP thì không addhost
		=> Nếu sử dụng port thì mở port: https://helpdesk.inet.vn/knowledgebase/huong-dan-mo-cong-open-port-tren-windows-server
	
=> Design draft database => innovate to improve => To be bester

API:
**** ==>> Async/Await => Asynchronous 100% => IIS Deployment => Task => ThreadPool => Thread => Asynchronous/Synchronous => Scale Vertical/Horizoltal
			******** Horizoltal: Add more PC ******
			******** Vertical: Increasing the memory or CPU power. ******
			==>> By its proper usage, we can increase the VERTICAL scalability at the server level of our API.
		+ https://code-maze.com/asynchronous-programming-with-async-and-await-in-asp-net-core/
		=>> "All of these leads to improved scalability of our application."
		"========================== Asynchronous Programming And Its Advantage ==========================
			+ By using asynchronous programming, we avoid performance bottlenecks and enhance the responsiveness of our applications. It is a programming technique that allows us to execute our flows without blocking our application or causing the thread pool starvation. 
			
			+ The often misconception is that by using the async and await keywords we gain better performance in terms of the speed of our application. But that’s not the case. For example, if we have synchronous code that fetches the data from the database and it takes three seconds to complete, our asynchronous code won’t be any faster than that. But we do get an indirect performance improvement regarding how many concurrent requests our server can handle. In other words, we increase the scalability of our application by using the async and await keywords."
	
		=>> CPU Bound means the rate at which process progresses is limited by the speed of the CPU. A task that performs calculations on a small set of numbers, for example multiplying small matrices, is likely to be CPU bound.
		=>> I/O Bound means the rate at which a process progresses is limited by the speed of the I/O subsystem. A task that processes data from disk, for example, counting the number of lines in a file is likely to be I/O bound.
		=>> Memory bound means the rate at which a process progresses is limited by the amount memory available and the speed of that memory access. A task that processes large amounts of in memory data, for example multiplying large matrices, is likely to be Memory Bound.
		=>> Cache bound means the rate at which a process progress is limited by the amount and speed of the cache available. A task that simply processes more data than fits in the cache will be cache bound.

		********** I/O Bound would be slower than Memory Bound would be slower than Cache Bound would be slower than CPU Bound. **********

"The solution to being I/O bound isn't necessarily to get more Memory. In some situations, the access algorithm could be designed around the I/O, Memory or Cache limitations. See Cache Oblivious Algorithms (https://en.wikipedia.org/wiki/Cache-oblivious_algorithm)."
			
	* Coding Convention => StyleCop.Analyzers && SonarAnalyzer.CSharp
	* Unit test for infrastructure => Xunit && FluentAssertions && NetArchTest.Rules
	* Loging => Serilog + (https://code-maze.com/structured-logging-in-asp-net-core-with-serilog/)
						+ Log Levels in Serilog: (https://code-maze.com/csharp-different-log-levels-in-serilog/)
						+ Rolling File: (https://code-maze.com/csharp-configure-rolling-file-logging-with-serilog/)
	* Authen + Author => JWT + Identity (https://code-maze.com/asp-net-core-identity-series/)
							 + IdentityServer (https://code-maze.com/identityserver-4-series/)
												(https://identityserver4.readthedocs.io/en/latest/)
							 + Duende:(https://docs.duendesoftware.com/identityserver/v6)
							 + Skuruba: https://skoruba-identityserver4-admin.readthedocs.io/en/dev-doc/introduction/overview.html
*GOOD* * Security:https://docs.developers.optimizely.com/content-management-system/docs/security
	* Polly pattern => Resilient: https://code-maze.com/creating-resilient-microservices-in-net-with-polly/
	
*GOOD*     		https://learn.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/handle-partial-failure

	***********************************************************************************************************************************************
	***********************************************************************************************************************************************
	** Lambda Expressions in C#: https://code-maze.com/lambda-expressions-in-csharp/
	** C# Delegates, Action, Func: https://code-maze.com/delegates-charp/ 
	**		{
	**			public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);
	**			=>> 
	**		}
	** Expression Trees in C#: https://code-maze.com/csharp-expression-trees/
	**		{
	**			IQueryable<TSource> Where<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
	** 			=>> 
	**		}
	** Events in C#: https://code-maze.com/csharp-events/
	***********************************************************************************************************************************************
	***********************************************************************************************************************************************

	* Manage Token => Redis
	* Result => ...
	* Exception => 
	* Global Exception Handler => MiddleWare
	* Global Validation Handler => MiddleWare
	* Handler Global Transaction For CommandHandler => MiddleWare _DbContext.SaveChangeAsync() dfsdfs DbContext.SaveChangeAsync
	* Serialize
	* Format API => Json vs XML
	* Paging, Searching, Sorting
	* Versoning => Url, Query, Header, Media => Url
	* Repository & Unit Of Work =>  EF: https://code-maze.com/entity-framework-core-series/ "QuerySide: Eager loading|Explicit Loading|Lazy loading"
									+ LinQ: https://code-maze.com/category/linq/
	* ReadSide: => Dapper : https://code-maze.com/using-dapper-with-asp-net-core-web-api/
	
	* Outbox Pattern:
	* Idempotent Pattern:
	* CQRS: ***************************************************************************************************************
	**	=>> SQL + NoSQL(MongoDb)
	**	=>> SQL + Redis
	**	=>> Event Sourcing + NoSql (MongoDb) =>> Demo Microservice: https://www.youtube.com/watch?v=UH-8hSlY-rQ&t=88s =>>(EventStorming: https://www.eventstorming.com/)
	***********************************************************************************************************************************************
	****>>>> IUnitOfWork
		public interface IUnitOfWork
		{
			Task ExecuteAsync(Func<CancellationToken, Task> operationAsync, CancellationToken cancellationToken);
		}
		
		public Task CreateAsync(IAggregateRoot aggregate, CancellationToken cancellationToken)
			=> _unitOfWork.ExecuteAsync(
				operationAsync: async ct =>
				{
					await _eventStoreRepository.CreateAsync(aggregate, ct);
					await _eventBusGateway.PublishAsync(aggregate.UncommittedEvents, ct);
				},
				cancellationToken: cancellationToken);
				
		**>> 
		
	***********************************************************************************************************************************************
	
	***>>> Client vs. Server Evaluation: https://learn.microsoft.com/en-us/ef/core/querying/client-eval
	***>>> How Queries Work: https://learn.microsoft.com/en-us/ef/core/querying/how-query-works
	
	====>>>>>>> EntityFramework Core vs Dapper: https://code-maze.com/entityframeworkcore-vs-dapper/
	* Single vs. Split Queries: https://learn.microsoft.com/en-us/ef/core/querying/single-split-queries
	=>>  
		>>>>>>>Warning<<<<<<<<
		When using split queries with Skip/Take, pay special attention to making your query ordering fully unique; not doing so could cause incorrect data to be returned. For example, if results are ordered only by date, but there can be multiple results with the same date, then each one of the split queries could each get different results from the database. Ordering by both date and ID (or any other unique property or combination of properties) makes the ordering fully unique and avoids this problem. Note that relational databases do not apply any ordering by default, even on the primary key.

		>>>>>>>Note<<<<<<<<
		One-to-one related entities are always loaded via JOINs in the same query, as it has no performance impact.
		
	+>> Characteristics of split queries
		-  While split query avoids the performance issues associated with JOINs and cartesian explosion, it also has some drawbacks:

			+ While most databases guarantee data consistency for single queries, no such guarantees exist for multiple queries. If the database is updated concurrently when executing your queries, resulting data may not be consistent. You can mitigate it by wrapping the queries in a serializable or SNAPSHOT TRANSACTION, although doing so may create performance issues of its own. For more information, see your database's documentation.
		
			+ Each query currently implies an additional network roundtrip to your database. Multiple network roundtrips can degrade performance, especially where latency to the database is high (for example, cloud services).
		
			+ While some databases allow consuming the results of multiple queries at the same time (SQL Server with MARS, Sqlite), most allow only a single query to be active at any given point. So all results from earlier queries must be buffered in your application's memory before executing later queries, which leads to increased memory requirements.
			
		- Unfortunately, there isn't one strategy for loading related entities that fits all scenarios. Carefully consider the advantages and disadvantages of single and split queries to select the one that fits your needs.
		---------------------------------------------------------------------------------------------------------------------
		|||| +++ >>>>>>> Snapshot Isolation in SQL Server: https://www.sqlshack.com/snapshot-isolation-in-sql-server/    |||||
		---------------------------------------------------------------------------------------------------------------------
		
	+>> Using Multiple Databases - Entity Framework Core: https://code-maze.com/aspnetcore-multiple-databases-efcore/
	***********************************************************************************************************************************************
	
	* RESTful web API design: https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design
	* End point:
	=========================================================================================================================
		Resource	|			POST		|			GET				|		 	PUT				  | 	DELETE
	/customers	 	| Create a new customer	|	Retrieve all customers	|	Bulk update of customers  | Remove all customers
	=========================================================================================================================
	/customers/1	|      		Error	    |   Retrieve the details    |	Update the details         |  Remove customer 1
		            |                       |      for customer 1	    |	of customer 1 if it exists |	
	=========================================================================================================================
	/customers/1/orders	| Create a new order |	Retrieve all orders  	|	Bulk update of orders 	|	Remove all orders 
						|	for customer 1	 |     for customer 1	 	|		 for customer 1 	|     for customer 1
						|	                 |                          |                           |  
	=========================================================================================================================
	+
	[ApiControler]
	[Author]
	[Route("api/v{version:apiVersion}/[Controller]")]
	ApiControler : ControllerBase
	=> Inject ISender, Loging, Function handle error or response
	
	[ApiVersion("3.0")]
	OrdersController : ApiController
		=> Deprecating Previous Versions: [ApiVersion("1.0", Deprecated = true)]
		
		
	* Response:
		- 200: OK - 
		- 404: NotFound
		- 400: BabRequest
		- 204: NoContent
		- 201: Created, CreatedAtRoute, CreatedAtAction
		- 401: UnAuthentication
		- 403: Forbident
			
	=> + Asynchronous: 
			- Async/Await => Tast => ThreadPool => Thread => Async/Sync => Scale => Vertical/Horizoltal
		    var result = await repositoty.AddAync() await AddAync(); => dbContext.SaveChangeAsync();
			- i/o-bound: 
			- cpu-bound:
			
	=> + Caching. https://code-maze.com/category/caching/
			+ Output cache: https://code-maze.com/aspnet-core-output-caching/
			+ Respponse cache: https://code-maze.com/aspnetcore-response-caching/
			+ In-Memory cache: https://code-maze.com/aspnetcore-in-memory-caching/
			+ Distribued cache: https://code-maze.com/aspnetcore-distributed-caching/
			=>> Handle invalid cache


========================================= Advance =========================================
WebServer: https://www.techtarget.com/whatis/definition/Web-server#:~:text=A%20web%20server%20is%20software,and%20delivering%20webpages%20to%20users.
HTTP Architectural Aspects: https://code-maze.com/http-series-part-2/
	+ Web Servers
	+ Proxy Servers
	+ Caching
	+ Gateways, Tunnels, and Relays
	+ Web Crawlers
HTTP: https://code-maze.com/http-series/
HttpClient: https://code-maze.com/httpclient-with-asp-net-core-tutorial/
Deployment with difference environment:
	+ Ubuntu => 'NginX': https://code-maze.com/deploy-aspnetcore-linux-nginx/
	+ Windows => 'IIS': https://code-maze.com/net-core-web-development-part16/
	...
RabbitMQ:
	+ How to Use RabbitMQ in ASP.NET Core: https://code-maze.com/aspnetcore-rabbitmq/
	+ MassTransit with RabbitMQ: https://code-maze.com/masstransit-rabbitmq-aspnetcore/
	+ https://www.rabbitmq.com/tutorials/tutorial-one-dotnet.html
	+ RabbitMQ Message Queue: https://www.c-sharpcorner.com/article/rabbitmq-message-queue-using-net-core-6-web-api/
Design Patterns: https://code-maze.com/design-patterns-csharp/
ElasticSearch:	+ https://code-maze.com/elasticsearch-aspnet-core/
				+ https://www.elastic.co/guide/en/elasticsearch/client/net-api/6.x/nest-getting-started.html

Docker Series: 	+ https://docs.docker.com/engine/
				+ https://code-maze.com/docker-series/
Kubernetes Cluster: https://code-maze.com/deploy-aspnetcore-webapi-kubernetes-cluster-azure/
Azure: https://code-maze.com/azure-with-asp-net-core-series/

Microservices: https://code-maze.com/category/microservices/
        *GOOD* https://learn.microsoft.com/en-us/dotnet/architecture/microservices/
		https://azure.microsoft.com/en-us/products/kubernetes-service
		https://learn.microsoft.com/en-us/azure/aks/intro-kubernetes
		
Performance and Benchmarking: 
	* Introduction to Benchmarking in C# and ASP.NET Core Projects: https://code-maze.com/benchmarking-csharp-and-asp-net-core-projects/
	
	*** REST protocol compares to the gRPC protocol.*************************************************************
	*** https://benchmarkdotnet.org/
	*** PROJECT: https://github.com/CodeMazeBlog/benchmark-csharp-aspnetcore
	*************************************************************************************************************
	
	* Memory Allocation Optimization With BenchmarkDotNet: https://code-maze.com/csharp-memory-allocation-optimization-with-benchmarkdotnet/
	* Boosting Performance With Sealed Classes in .NET: https://code-maze.com/improve-performance-sealed-classes-dotnet/
	* Performance Testing of ASP.NET Core APIs With k6: https://code-maze.com/aspnetcore-performance-testing-with-k6/
	* HttpClient vs RestSharp – Which One to Use in .NET: https://code-maze.com/httpclient-vs-restsharp/
	* Any() vs Count() in .NET: Which One is Better?: https://code-maze.com/any-vs-count-dotnet/
	* How to Use Span in C# to Improve Application Performance: https://code-maze.com/csharp-span-to-improve-application-performance/
	* Replace Line Breaks in a String in C#: https://code-maze.com/csharp-replace-line-breaks-in-a-string/
	
Author: Code Maze:
	***********************************************************************************************************************************************
	** https://code-maze.com/author/codemazecontributor/
	** https://code-maze.com/latest-posts-on-code-maze/
	***********************************************************************************************************************************************
